import pg from "pg";
import {
  assertEnvVar,
  assertEnvVarNumber,
  assertEnvVarBool,
} from "./envutils.js";

try {
  await run();
  console.log("Done!");
} catch (err) {
  console.error(err);
  process.exit(1);
}

async function run() {
  const postgresHost = assertEnvVar("POSTGRES_HOST");
  const postgresUser = assertEnvVar("POSTGRES_USER");
  const postgresPassword = assertEnvVar("POSTGRES_PASSWORD");
  const postgresPort = assertEnvVarNumber("POSTGRES_PORT", "5432");
  const postgresDb = assertEnvVar("POSTGRES_DB");
  const deleteDb = assertEnvVarBool("DELETE_DB", "false");

  // Create the database unless it already exists
  let client = new pg.Client({
    host: postgresHost,
    user: postgresUser,
    password: postgresPassword,
    port: postgresPort,
  });
  await client.connect();
  try {
    if (deleteDb) {
      await deleteDatabase(client, postgresDb);
    }
    await createDatabase(client, postgresDb);
  } finally {
    await client.end();
  }

  // Run database migrations
  client = new pg.Client({
    host: postgresHost,
    user: postgresUser,
    password: postgresPassword,
    port: postgresPort,
    database: postgresDb,
  });
  await client.connect();
  try {
    await updateDatabaseV1(client);
    // If we ever need to update the database schema, there will be additional idempotent calls here, e.g.
    // `updateDatabaseV2`, `updateDatabaseV3`, etc.
  } finally {
    await client.end();
  }
}

// Returns true if the given database exists; false if otherwise.
async function databaseExists(
  client: pg.Client,
  dbName: string,
): Promise<boolean> {
  const res = await client.query(
    "SELECT EXISTS(SELECT FROM pg_database WHERE datname = $1)",
    [dbName],
  );
  return res.rows[0].exists;
}

// Deletes the given database if it exists. Idempotent.
async function deleteDatabase(client: pg.Client, dbName: string) {
  if (await databaseExists(client, dbName)) {
    console.log(`Deleting existing database '${dbName}'...`);
    await client.query(`DROP DATABASE ${dbName}`);
  } else {
    console.log("Database does not exist; skipping delete.");
  }
}

// Creates the database. Idempotent.
async function createDatabase(client: pg.Client, dbName: string) {
  // See https://commandprompt.com/education/postgresql-create-database-if-not-exists/
  if (!(await databaseExists(client, dbName))) {
    console.log(`Creating database '${dbName}'...`);
    await client.query(`CREATE DATABASE ${dbName}`);
  } else {
    console.log("Database already exists; skipping create.");
  }
}

// Updates database to V1. Idempotent.
async function updateDatabaseV1(client: pg.Client) {
  console.log("Upgrading database to version 1...");

  console.log("-- Creating properties table...");
  await client.query(
    `CREATE TABLE IF NOT EXISTS properties(
      name varchar(32) PRIMARY KEY,
      value varchar(32));`,
  );

  console.log("-- Setting database version...");
  await client.query(
    "INSERT INTO properties(name, value) VALUES ($1, $2) ON CONFLICT(name) DO NOTHING;",
    ["version", "1"],
  ); // upsert

  console.log("-- Creating users table...");
  await client.query(
    `CREATE TABLE IF NOT EXISTS users(
      id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      name varchar(32),
      deleted boolean DEFAULT false);`,
  );

  console.log("-- Creating questions table...");
  // In real life we would use a custom, multi-language configuration for `ts_body` rather than `english`.
  await client.query(
    `CREATE TABLE IF NOT EXISTS questions(
      id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      title varchar(128),
      html_body text,
      text_body text,
      ts_body tsvector GENERATED ALWAYS AS (to_tsvector('english', text_body)) STORED,
      creation timestamp,
      score smallint,
      user_id bigint REFERENCES users(id));`,
  );

  console.log("-- Creating questions index...");
  await client.query(
    `CREATE INDEX IF NOT EXISTS ts_body_idx ON questions USING GIN(ts_body);`, // GIN index for full-text search
  );

  console.log("-- Creating q_comments table...");
  await client.query(
    `CREATE TABLE IF NOT EXISTS q_comments(
      id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      question_id bigint REFERENCES questions(id),
      html_body text,
      user_id bigint REFERENCES users(id));`,
  );

  console.log("-- Creating answers table...");
  await client.query(
    `CREATE TABLE IF NOT EXISTS answers(
      id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      question_id bigint REFERENCES questions(id),
      html_body text,
      text_body text,
      creation timestamp,
      score smallint,
      user_id bigint REFERENCES users(id),
      accepted boolean);`,
  );

  console.log("-- Creating a_comments table...");
  await client.query(
    `CREATE TABLE IF NOT EXISTS a_comments(
      id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      answer_id bigint REFERENCES answers(id),
      html_body text,
      user_id bigint REFERENCES users(id));`,
  );
}
